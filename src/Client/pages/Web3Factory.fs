module Client.Web3Factory

open System
open System.Text

open Fable.Core
open Fable.Core.JsInterop
open Fable.Import
open Fable.Helpers.React
open Fable.Helpers.React.Props
open Fable.PowerPack
open Fable.PowerPack.Fetch.Fetch_types
open Fable.Import.web3Impl
open ServerCode.Commodities
open Client.Model
open Client.Messages
open Elmish

module O = FSharp.Core.Option

type MessageAdded = { dealNumber: uint32; idx: uint32; msg: TradingMsg }

let abi = """[{"constant":true,"inputs":[{"name":"dealNumber","type":"uint32"}],"name":"getDealCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"dealNumber","type":"uint32"},{"name":"msg","type":"string"}],"name":"addMessage","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"data","type":"bytes32"}],"name":"bytes32ToString","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"v","type":"uint256"}],"name":"uintToBytes","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"dealNumber","type":"uint32"}],"name":"isKnownDeal","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getDealNumbers","outputs":[{"name":"","type":"uint32[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"dealNumber","type":"uint32"},{"name":"idx","type":"uint32"}],"name":"getDealEvent","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"dealNumber","type":"uint32"}],"name":"getDealEvents","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"dealNumber","type":"uint32"},{"indexed":false,"name":"idx","type":"uint32"},{"indexed":false,"name":"msg","type":"string"}],"name":"MessageAdded","type":"event"}]"""
let contractBytecode = """0x606060405234156200001057600080fd5b5b6000604051805910620000215750595b908082528060200260200182016040525b50600090805190602001906200004a92919062000052565b505b6200013f565b82805482825590600052602060002090600701600890048101928215620000f65791602002820160005b83821115620000c257835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026200007c565b8015620000f45782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620000c2565b505b50905062000105919062000109565b5090565b6200013c91905b808211156200013857600081816101000a81549063ffffffff02191690555060010162000110565b5090565b90565b61110c806200014f6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632fac2c5b1461009157806337216d6c146100ce5780639201de551461013a57806394e8767d146101db5780639ac611151461021a578063a5e27e601461025b578063bcbd87d6146102c6578063de581c4114610378575b600080fd5b341561009c57600080fd5b6100b8600480803563ffffffff1690602001909190505061041b565b6040518082815260200191505060405180910390f35b34156100d957600080fd5b610138600480803563ffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061044d565b005b341561014557600080fd5b61015f60048080356000191690602001909190505061060b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a05780820151818401525b602081019050610184565b50505050905090810190601f1680156101cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e657600080fd5b6101fc6004808035906020019091905050610709565b60405180826000191660001916815260200191505060405180910390f35b341561022557600080fd5b610241600480803563ffffffff169060200190919050506107b3565b604051808215151515815260200191505060405180910390f35b341561026657600080fd5b61026e610844565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102b25780820151818401525b602081019050610296565b505050509050019250505060405180910390f35b34156102d157600080fd5b6102fc600480803563ffffffff1690602001909190803563ffffffff169060200190919050506108cf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033d5780820151818401525b602081019050610321565b50505050905090810190601f16801561036a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038357600080fd5b61039f600480803563ffffffff169060200190919050506109ba565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e05780820151818401525b6020810190506103c4565b50505050905090810190601f16801561040d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600080600160008463ffffffff1663ffffffff1681526020019081526020016000209050808054905091505b50919050565b6000610458836107b3565b15156104ad57600080548060010182816104729190610db3565b91600052602060002090600891828204019190066004025b85909190916101000a81548163ffffffff021916908363ffffffff160217905550505b600160008463ffffffff1663ffffffff16815260200190815260200160002090508080548060010182816104e19190610ded565b916000526020600020900160005b8490919091509080519060200190610508929190610e19565b505080600160008563ffffffff1663ffffffff168152602001908152602001600020908054610538929190610e99565b507fb33c4734c36db910ffa351906be70f46ddd9d6de672358970989cfa5db105ecb83600183805490500384604051808463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105c95780820151818401525b6020810190506105ad565b50505050905090810190601f1680156105f65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b505050565b610613610f09565b61061b610f1d565b600080602060405180591061062d5750595b908082528060200260200182016040525b509250600091505b60208210156106fd578160080260020a856001900402600102905060007f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156106ef578083838151811015156106be57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b5b8180600101925050610646565b8293505b505050919050565b60008082141561073b577f300000000000000000000000000000000000000000000000000000000000000090506107aa565b5b60008211156107a957610100816001900481151561075657fe5b0460010290507f01000000000000000000000000000000000000000000000000000000000000006030600a8481151561078b57fe5b06010260010281179050600a828115156107a157fe5b04915061073c565b5b8090505b919050565b6000806000809150600090505b6000805490508163ffffffff161015610839578363ffffffff1660008263ffffffff168154811015156107ef57fe5b90600052602060002090600891828204019190066004025b9054906101000a900463ffffffff1663ffffffff16141561082b5760019150610839565b5b80806001019150506107c0565b8192505b5050919050565b61084c610f31565b60008054806020026020016040519081016040528092919081815260200182805480156108c457602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116108875790505b505050505090505b90565b6108d7610f09565b600160008463ffffffff1663ffffffff1681526020019081526020016000208263ffffffff1681548110151561090957fe5b906000526020600020900160005b508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ac5780601f10610981576101008083540402835291602001916109ac565b820191906000526020600020905b81548152906001019060200180831161098f57829003601f168201915b505050505090505b92915050565b6109c2610f09565b6109ca610f45565b600080600080610a0e6040805190810160405280600381526020017f7c237c0000000000000000000000000000000000000000000000000000000000815250610bdc565b9450600160008863ffffffff1663ffffffff168152602001908152602001600020935083805490509250600090505b828160ff161015610b5757818054806001018281610a5b9190610f5f565b916000526020600020906002020160005b610b2d878560ff16815481101515610a8057fe5b906000526020600020900160005b508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050505050610bdc565b909190915060008201518160000155602082015181600101555050505b8080600101915050610a3d565b610bcf8583805480602002602001604051908101604052809291908181526020016000905b82821015610bc6578382906000526020600020906002020160005b506040805190810160405290816000820154815260200160018201548152505081526020019060010190610b7c565b50505050610c0b565b95505b5050505050919050565b610be4610f45565b60006020830190506040805190810160405280845181526020018281525091505b50919050565b610c13610f09565b600080610c1e610f09565b60008086511415610c415760206040519081016040528060008152509450610d5c565b60018651038760000151029350600092505b8551831015610c8a578583815181101515610c6a57fe5b9060200190602002015160000151840193505b8280600101935050610c53565b83604051805910610c985750595b908082528060200260200182016040525b509150602082019050600092505b8551831015610d5857610d01818785815181101515610cd257fe5b90602001906020020151602001518886815181101515610cee57fe5b9060200190602002015160000151610d66565b8583815181101515610d0f57fe5b9060200190602002015160000151810190506001865103831015610d4a57610d408188602001518960000151610d66565b8660000151810190505b5b8280600101935050610cb7565b8194505b5050505092915050565b60005b602082101515610d8f57825184526020840193506020830192505b602082039150610d69565b6001826020036101000a039050801983511681855116818117865250505b50505050565b815481835581811511610de8576007016008900481600701600890048360005260206000209182019101610de79190610f91565b5b505050565b815481835581811511610e1457818360005260206000209182019101610e139190610fb6565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e5a57805160ff1916838001178555610e88565b82800160010185558215610e88579182015b82811115610e87578251825591602001919060010190610e6c565b5b509050610e959190610f91565b5090565b828054828255906000526020600020908101928215610ef85760005260206000209182015b82811115610ef75782829080546001816001161561010002031660029004610ee7929190610fe2565b5091600101919060010190610ebe565b5b509050610f059190610fb6565b5090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b604080519081016040528060008152602001600081525090565b815481835581811511610f8c57600202816002028360005260206000209182019101610f8b9190611069565b5b505050565b610fb391905b80821115610faf576000816000905550600101610f97565b5090565b90565b610fdf91905b80821115610fdb5760008181610fd29190611098565b50600101610fbc565b5090565b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061101b5780548555611058565b8280016001018555821561105857600052602060002091601f016020900482015b8281111561105757825482559160010191906001019061103c565b5b5090506110659190610f91565b5090565b61109591905b808211156110915760008082016000905560018201600090555060020161106f565b5090565b90565b50805460018160011615610100020316600290046000825580601f106110be57506110dd565b601f0160209004906000526020600020908101906110dc9190610f91565b5b505600a165627a7a7230582044d89addcf2376bb38089dea0cc60cf5407c05381148ffb24dca2466d9fc88f00029"""
// let mutable private contractAddress = "0x2950108980059edea91732be0c7a81884d1b14ae"
// let EthContractAddress() = contractAddress
let ethHost = match Utils.load<string> "EthereumHost" with
                | Some eh -> eh
                | None -> 
                    let defaultHost = "http://127.0.0.1:8545"
                    Utils.save "EthereumHost" defaultHost
                    defaultHost
let web3: Web3Impl = !!createNew web3 (createNew httpProvider ethHost)
Browser.console.log web3
Browser.console.log ("Accounts#: " + (web3.eth.accounts |> fun accs -> String.Join(", ", accs)))

let private contractAbi = web3.eth?contract( U4.Case2(JS.JSON.parse(abi)) )

let createEthContract (dispatch: AppMsg -> unit) =
    //let unlocked = web3.personal.unlockAccount(web3.eth.coinbase, "password") 
    contractAbi?``new``(createObj [ "data" ==> contractBytecode 
                                    "from" ==> web3.eth.coinbase
                                    "gas" ==> 40000000 ], 
                        Func<_,_,_>(fun err contract ->
                                        
                                        if (err |> isNull |> not) then
                                            Browser.console.log ("Error occured while creating contract: ")
                                            Browser.console.log (err) // TODO: Add proper error handling
                                        elif !!contract?address |> String.IsNullOrWhiteSpace then
                                            Browser.console.log ("Create Contract returned an empty address: ")
                                            Browser.console.log (contract) // Just waiting for the second call to the callback (happens after contract has been mined)
                                        else
                                            let ca = !!contract?address
                                            Utils.save "ContractAddress" ca
                                            Browser.console.log ("Contract created with address: '" + ca + "'")
                                            ConnectToEthContractMsg ca |> EthereumMsg |> dispatch
                        )
    ) |> ignore

let private bn2uint o = 
    let dnc: uint32[] = !!o?c
    dnc.[0]

let loadEthContract contractAddress dispatch =
    Browser.console.log ("Loading existing contracts from Ethereum address: '" + contractAddress + "'")
    let contract = contractAbi?at(contractAddress)
    let dealNumbersBNs: obj[] = !!contract?getDealNumbers()
    let dealNumbers: uint32[] = dealNumbersBNs |> Array.map bn2uint
    Browser.console.log(dealNumbers)
    {   EthContractAddress = contractAddress
        EthContractAbi = contractAbi
        HistoryLoading = dealNumbers |> Set.ofArray
        EthContract = contract
        EthDispatcher = 
            fun (msg: TradingMsg) ->
                LoadingMsg true |> dispatch
                let encoded = (msg |> toJsonWithTypeInfo)
                // let unlocked = web3.personal.unlockAccount(web3.eth.coinbase, "password") 
                // Browser.console.log(unlocked)
                let data = !!contract?addMessage(msg.UID, encoded, createObj [ "from" ==> web3.eth.coinbase; "gas" ==> 40000000])
                Browser.console.log(data) 
    } 
    |> ConnectedToEthContractMsg  
    |> EthereumMsg
    |> dispatch 

let loadDealEvents ethContract (uid: UID) =
    Browser.console.log uid
    // let events: string = !!ethContract?getDealEvents(uid)
    // let messages = (events.Split([| "|#|" |], StringSplitOptions.RemoveEmptyEntries)) 
    //                 |> Array.map (JsInterop.ofJsonWithTypeInfo<TradingMsg>)
    Browser.console.log "Preloading messages:"

    let count = !!ethContract?getDealCount(uid) |> bn2uint |> int
    let messages: string[] = [| for i in 0 .. 1 .. count - 1 -> !!ethContract?getDealEvent(uid, i) |] 
    let messages = messages |> Array.map (JsInterop.ofJsonWithTypeInfo<TradingMsg>)

    Browser.console.log messages
    (messages |> Seq.map TradingMsg |> List.ofSeq) @ [ LoadingMsg false ] 

let subscribeContractUpdates ethContract contracts dispatch =
    ethContract?allEvents(
        Func<_,_,_>(
            fun e result -> 
                Browser.console.log(sprintf "Event: '%A' Error: '%A'" result e)
                if e |> isNull && (!!result?event = "MessageAdded") then // Skipping the round with no event (this handler is called twice by web3 for every contract added)
                    let args = result?args
                    let data = {dealNumber = bn2uint args?dealNumber
                                idx = bn2uint args?idx
                                msg = !!args?msg |> JsInterop.ofJsonWithTypeInfo }
                    Browser.console.log "Received message:"
                    Browser.console.log data
                    Browser.console.log ("Contract found: " + (contracts |> Map.containsKey data.dealNumber).ToString())
                    let msg = match contracts |> Map.containsKey data.dealNumber, data.msg with
                                // | _, SellerMsg (AddContract _) 
                                // | true, _ -> data.msg |> TradingMsg 
                                // | _, _ -> LoadDealHistoryMsg data.dealNumber |> EthereumMsg
                                | _, _ -> data.msg |> TradingMsg 
                    msg |> dispatch
                    LoadingMsg false |> dispatch
        )) |> ignore 
    Browser.console.log "Subscribed to Eth Contract events"

let init() = 
    let msg = match Utils.load<string> "ContractAddress" with
                | Some ca -> ConnectToEthContractMsg ca
                | None -> CreateEthContractMsg
    None, [ LoadingMsg true; msg |> EthereumMsg ] |> List.map Cmd.ofMsg
    

let update (msg: EthereumMsg) model : Model * Cmd<_> = 
    let model, cmds = 
        match msg with
        | CreateEthContractMsg -> model, [ Cmd.ofSub createEthContract ]
        | ConnectToEthContractMsg contractAddr ->  model, [ Cmd.ofSub (loadEthContract contractAddr) ]
        | ConnectedToEthContractMsg ethConnection -> 
            let loadHistories = if ethConnection.HistoryLoading.IsEmpty then [Cmd.ofMsg (LoadingMsg false)]
                                else (ethConnection.HistoryLoading |> Seq.map (LoadDealHistoryMsg >> EthereumMsg >> Cmd.ofMsg) |> Seq.toList)
            { model with EthConnection = Some ethConnection}, 
            ((subscribeContractUpdates ethConnection.EthContract model.Trading.Contracts) |> Cmd.ofSub) :: loadHistories                    
        | LoadDealHistoryMsg uid -> 
            model, loadDealEvents model.EthConnection.Value.EthContract uid |> List.map Cmd.ofMsg 
    model, Cmd.batch cmds

